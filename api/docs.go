// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/order/add_order": {
            "post": {
                "description": "initiates a change in the user's balance, returns order info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "create new order for user with specific service",
                "parameters": [
                    {
                        "description": "Info about order",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "created order",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/order/change_order_status": {
            "post": {
                "description": "proof or decline existing order, return current state of order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "order"
                ],
                "summary": "change status of existing order",
                "parameters": [
                    {
                        "description": "Info about order",
                        "name": "info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChangeOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "proofed or declined order",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/report/generate_report": {
            "get": {
                "description": "generate report with description of services in specific month in format \"MM-YYYY\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report"
                ],
                "summary": "generate report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "month of year in format MM-YYYY",
                        "name": "month",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "path to generated report in static dir",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/service/get_all": {
            "get": {
                "description": "return list of all available services",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "get info about services",
                "responses": {
                    "200": {
                        "description": "info about services",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Service"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/get_balance": {
            "get": {
                "description": "return balances of user if it exists",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "access user balance",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of user",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "info about user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/get_history": {
            "get": {
                "description": "return list of orders attached to specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "return history of user` + "`" + `s orders",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of user",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "start date in format DD-MM-YYYY",
                        "name": "from_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "end date in format DD-MM-YYYY",
                        "name": "to_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "sorting type for orders = amount, created_at, default = created_at",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "max orders in response default 10",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset default 0",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "info about user",
                        "schema": {
                            "$ref": "#/definitions/models.HistoryFrame"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.AddOrderRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "service_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.ChangeOrderRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "order_id": {
                    "type": "integer"
                }
            }
        },
        "models.History": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "order_id": {
                    "type": "integer"
                },
                "proofed_at": {
                    "type": "string"
                },
                "service_description": {
                    "type": "string"
                },
                "service_name": {
                    "type": "string"
                },
                "service_type": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.HistoryFrame": {
            "type": "object",
            "properties": {
                "current_offset": {
                    "type": "integer"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.History"
                    }
                },
                "total_operations": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "create_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "proofed_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Service": {
            "type": "object",
            "properties": {
                "confirmation_needed": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "service_type": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "frozen_balance": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "0.0.0.0:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "CreditHolidaysAPI",
	Description:      "API for Credit Holidays app",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
