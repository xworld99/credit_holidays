// Code generated by MockGen. DO NOT EDIT.
// Source: credit_holidays/internal/db (interfaces: CreditHolidaysDB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "credit_holidays/internal/models"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockCreditHolidaysDB is a mock of CreditHolidaysDB interface.
type MockCreditHolidaysDB struct {
	ctrl     *gomock.Controller
	recorder *MockCreditHolidaysDBMockRecorder
}

// MockCreditHolidaysDBMockRecorder is the mock recorder for MockCreditHolidaysDB.
type MockCreditHolidaysDBMockRecorder struct {
	mock *MockCreditHolidaysDB
}

// NewMockCreditHolidaysDB creates a new mock instance.
func NewMockCreditHolidaysDB(ctrl *gomock.Controller) *MockCreditHolidaysDB {
	mock := &MockCreditHolidaysDB{ctrl: ctrl}
	mock.recorder = &MockCreditHolidaysDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreditHolidaysDB) EXPECT() *MockCreditHolidaysDBMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockCreditHolidaysDB) Begin(arg0 context.Context, arg1 sql.IsolationLevel) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", arg0, arg1)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockCreditHolidaysDBMockRecorder) Begin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockCreditHolidaysDB)(nil).Begin), arg0, arg1)
}

// Close mocks base method.
func (m *MockCreditHolidaysDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCreditHolidaysDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCreditHolidaysDB)(nil).Close))
}

// Commit mocks base method.
func (m *MockCreditHolidaysDB) Commit(arg0 *sql.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit", arg0)
}

// Commit indicates an expected call of Commit.
func (mr *MockCreditHolidaysDBMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockCreditHolidaysDB)(nil).Commit), arg0)
}

// CreateOrder mocks base method.
func (m *MockCreditHolidaysDB) CreateOrder(arg0 context.Context, arg1 *sql.Tx, arg2 models.Order) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockCreditHolidaysDBMockRecorder) CreateOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockCreditHolidaysDB)(nil).CreateOrder), arg0, arg1, arg2)
}

// FormReport mocks base method.
func (m *MockCreditHolidaysDB) FormReport(arg0 context.Context, arg1 models.CSVData) (models.CSVData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormReport", arg0, arg1)
	ret0, _ := ret[0].(models.CSVData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormReport indicates an expected call of FormReport.
func (mr *MockCreditHolidaysDBMockRecorder) FormReport(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormReport", reflect.TypeOf((*MockCreditHolidaysDB)(nil).FormReport), arg0, arg1)
}

// GetFullOrderInfo mocks base method.
func (m *MockCreditHolidaysDB) GetFullOrderInfo(arg0 context.Context, arg1 *sql.Tx, arg2 models.Order, arg3 models.User, arg4 models.Service) (models.Order, models.User, models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullOrderInfo", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(models.User)
	ret2, _ := ret[2].(models.Service)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetFullOrderInfo indicates an expected call of GetFullOrderInfo.
func (mr *MockCreditHolidaysDBMockRecorder) GetFullOrderInfo(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullOrderInfo", reflect.TypeOf((*MockCreditHolidaysDB)(nil).GetFullOrderInfo), arg0, arg1, arg2, arg3, arg4)
}

// GetHistoryFrame mocks base method.
func (m *MockCreditHolidaysDB) GetHistoryFrame(arg0 context.Context, arg1 models.HistoryFrame) (models.HistoryFrame, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryFrame", arg0, arg1)
	ret0, _ := ret[0].(models.HistoryFrame)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryFrame indicates an expected call of GetHistoryFrame.
func (mr *MockCreditHolidaysDBMockRecorder) GetHistoryFrame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryFrame", reflect.TypeOf((*MockCreditHolidaysDB)(nil).GetHistoryFrame), arg0, arg1)
}

// GetLastOrderMonth mocks base method.
func (m *MockCreditHolidaysDB) GetLastOrderMonth(arg0 context.Context, arg1 time.Time) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastOrderMonth", arg0, arg1)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastOrderMonth indicates an expected call of GetLastOrderMonth.
func (mr *MockCreditHolidaysDBMockRecorder) GetLastOrderMonth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastOrderMonth", reflect.TypeOf((*MockCreditHolidaysDB)(nil).GetLastOrderMonth), arg0, arg1)
}

// GetServiceById mocks base method.
func (m *MockCreditHolidaysDB) GetServiceById(arg0 context.Context, arg1 models.Service) (models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceById", arg0, arg1)
	ret0, _ := ret[0].(models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceById indicates an expected call of GetServiceById.
func (mr *MockCreditHolidaysDBMockRecorder) GetServiceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceById", reflect.TypeOf((*MockCreditHolidaysDB)(nil).GetServiceById), arg0, arg1)
}

// GetServicesList mocks base method.
func (m *MockCreditHolidaysDB) GetServicesList(arg0 context.Context) ([]models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesList", arg0)
	ret0, _ := ret[0].([]models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesList indicates an expected call of GetServicesList.
func (mr *MockCreditHolidaysDBMockRecorder) GetServicesList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesList", reflect.TypeOf((*MockCreditHolidaysDB)(nil).GetServicesList), arg0)
}

// GetUserById mocks base method.
func (m *MockCreditHolidaysDB) GetUserById(arg0 context.Context, arg1 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockCreditHolidaysDBMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockCreditHolidaysDB)(nil).GetUserById), arg0, arg1)
}

// InsertUserIfNotExists mocks base method.
func (m *MockCreditHolidaysDB) InsertUserIfNotExists(arg0 context.Context, arg1 *sql.Tx, arg2 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserIfNotExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserIfNotExists indicates an expected call of InsertUserIfNotExists.
func (mr *MockCreditHolidaysDBMockRecorder) InsertUserIfNotExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserIfNotExists", reflect.TypeOf((*MockCreditHolidaysDB)(nil).InsertUserIfNotExists), arg0, arg1, arg2)
}

// Rollback mocks base method.
func (m *MockCreditHolidaysDB) Rollback(arg0 *sql.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", arg0)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockCreditHolidaysDBMockRecorder) Rollback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockCreditHolidaysDB)(nil).Rollback), arg0)
}

// UpdateOrder mocks base method.
func (m *MockCreditHolidaysDB) UpdateOrder(arg0 context.Context, arg1 *sql.Tx, arg2 models.Order) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockCreditHolidaysDBMockRecorder) UpdateOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockCreditHolidaysDB)(nil).UpdateOrder), arg0, arg1, arg2)
}

// UpdateUser mocks base method.
func (m *MockCreditHolidaysDB) UpdateUser(arg0 context.Context, arg1 *sql.Tx, arg2 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockCreditHolidaysDBMockRecorder) UpdateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockCreditHolidaysDB)(nil).UpdateUser), arg0, arg1, arg2)
}
